{"version":3,"sources":["firebase.js","Form.js","Poll.js","Comment.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","setState","defineProperty","target","name","value","handleChoiceInput","newChoices","toConsumableArray","state","choices","currentTarget","dataset","index","addChoice","concat","removeChoice","pop","submitPoll","preventDefault","question","trim","addPoll","choiceNames","votes","Array","length","fill","swal","react_default","a","createElement","icon","button","role","aria-label","_this2","className","onSubmit","htmlFor","required","maxLength","id","placeholder","rows","onChange","type","pattern","title","map","choice","key","data-index","onClick","Component","Poll","vote","addVote","chart","voted","chartRef","React","createRef","undefined","myChartRef","current","getContext","Chart","defaults","global","defaultFontColor","defaultFontSize","data","labels","poll","datasets","label","borderWidth","backgroundColor","draw","borderColor","hoverBackgroundColor","options","legend","display","scales","xAxes","ticks","beginAtZero","_this$props$poll","ref","Comment","postComment","comment","database","push","toggleComments","displayComments","window","innerWidth","comments","keys","reverse","App","choiceIndex","dbRef","newVotes","child","set","newPolls","polls","update","toTop","document","body","scrollTop","documentElement","isLoading","orderByKey","on","response","val","onscroll","getElementById","style","_this3","src_Form","class","pollObject","src_Poll","src_Comment","addComment","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3abd279e.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBCeqwRDRPfzEw3udlB-iemagcUR-NV0uI\",\r\n  authDomain: \"project-5-7d9f7.firebaseapp.com\",\r\n  databaseURL: \"https://project-5-7d9f7.firebaseio.com\",\r\n  projectId: \"project-5-7d9f7\",\r\n  storageBucket: \"project-5-7d9f7.appspot.com\",\r\n  messagingSenderId: \"404454278177\",\r\n  appId: \"1:404454278177:web:45be7f8b4db59190\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport swal from '@sweetalert/with-react';\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      choices: ['', ''],\r\n      name: '',\r\n      question: '',\r\n    }\r\n  }\r\n\r\n  // sets the input element values to its repective state values\r\n  handleInput = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  }\r\n\r\n  // sets the choice input elements to its repective state values;\r\n  // having a seperate input handler for cleaner code\r\n  handleChoiceInput = (e) => {\r\n    const newChoices = [...this.state.choices];\r\n    newChoices[e.currentTarget.dataset.index] = e.target.value;\r\n    this.setState({\r\n      choices: newChoices\r\n    });\r\n  }\r\n\r\n  // adds another choice input field\r\n  addChoice = () => {\r\n    const newChoices = [...this.state.choices, ''];\r\n    this.setState({\r\n      choices: newChoices,\r\n    });\r\n  }\r\n\r\n  // remove the last choice input field\r\n  removeChoice = () => {\r\n    const newChoices = [...this.state.choices];\r\n    newChoices.pop();\r\n    this.setState({\r\n      choices: newChoices,\r\n    });\r\n  }\r\n\r\n  // submit the poll with the information given\r\n  submitPoll = (e) => {\r\n    e.preventDefault();\r\n\r\n    // used a if statement to do form validation on textarea element\r\n    if (this.state.question.trim()) {\r\n      this.props.addPoll({\r\n        name: this.state.name,\r\n        question: this.state.question,\r\n        choiceNames: this.state.choices,\r\n        votes: new Array(this.state.choices.length).fill(0)\r\n      });\r\n\r\n      this.setState({\r\n        choices: ['', ''],\r\n        name: '',\r\n        question: '',\r\n      });\r\n\r\n      swal(\r\n        <div>\r\n          <h2>Thanks for submitting</h2>\r\n          <p>Let's scroll down and check out the available polls!</p>\r\n        </div>,\r\n        {\r\n          icon: 'success',\r\n          button: \"Let's Do It!\"\r\n        }\r\n      );\r\n    } else { // poll is not submitted if textarea is empty\r\n      swal(\r\n        <div>\r\n          <h2>The poll question is empty, please enter one or you'll break the internet <span role=\"img\" aria-label=\"Grinning Squinting Face\">😆</span></h2>\r\n        </div>,\r\n        {\r\n          button: \"Silly me\"\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"poll-form wrapper\" onSubmit={this.submitPoll}>\r\n        <label\r\n          className=\"visually-hidden\"\r\n          htmlFor=\"question\">\r\n          Poll Question\r\n        </label>\r\n        <textarea\r\n          required\r\n          maxLength=\"200\"\r\n          id=\"question\"\r\n          name=\"question\"\r\n          placeholder=\"What do you want the general public to weight in on?\"\r\n          rows=\"3\"\r\n          value={this.state.question}\r\n          onChange={this.handleInput}>\r\n        </textarea>\r\n\r\n        <label\r\n          className=\"visually-hidden\"\r\n          htmlFor=\"name\">\r\n          Your Name\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          name=\"name\"\r\n          placeholder=\"What's your name?\"\r\n          required\r\n          pattern=\"\\S.{0,40}\"\r\n          title=\"Please enter 1 to 40 characters.\"\r\n          value={this.state.name}\r\n          onChange={this.handleInput} />\r\n\r\n        {\r\n          this.state.choices.map((choice, index) => {\r\n            index++;\r\n            return (\r\n              <div key={index}>\r\n                <label\r\n                  className=\"visually-hidden\"\r\n                  htmlFor={\"choice\" + index}>\r\n                  {\"Choice \" + index}\r\n                </label>\r\n\r\n                <input\r\n                  type=\"text\"\r\n                  id={\"choice\" + index}\r\n                  className={\"choice\" + index}\r\n                  name={\"choice\" + index}\r\n                  placeholder={\"Choice \" + index}\r\n                  required\r\n                  pattern=\"\\S.{0,60}\"\r\n                  title=\"Please enter 1 to 60 characters.\"\r\n                  data-index={index - 1}\r\n                  value={this.state.choices[index - 1]}\r\n                  onChange={this.handleChoiceInput} />\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n\r\n        {this.state.choices.length < 5 ? <button type=\"button\" onClick={this.addChoice}>Add Another Choice</button> : null}\r\n        {this.state.choices.length > 2 ? <button type=\"button\" onClick={this.removeChoice}>Remove Last Choice</button> : null}\r\n\r\n        <button type=\"submit\">Submit Poll</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport Chart from 'chart.js';\r\nimport pattern from 'patternomaly';\r\n\r\nclass Poll extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.chartRef = React.createRef();\r\n    this.chart = undefined;\r\n\r\n    this.state = {\r\n      voted: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n\r\n    Chart.defaults.global.defaultFontColor = 'black';\r\n    Chart.defaults.global.defaultFontSize = 20;\r\n    this.chart = new Chart(myChartRef, {\r\n      type: \"horizontalBar\",\r\n      data: {\r\n        labels: this.props.poll.choiceNames,\r\n        datasets: [\r\n          {\r\n            label: '',\r\n            data: this.props.poll.votes,\r\n            borderWidth: 3,\r\n            backgroundColor: [\r\n              pattern.draw('weave', 'rgba(152,251,152, 0.6)'),\r\n              pattern.draw('diagonal', 'rgba(135,206,250, 0.6)'),\r\n              pattern.draw('dot', 'rgba(221,160,221, 0.6)'),\r\n              pattern.draw('plus', 'rgba(255,127,80, 0.6)'),\r\n              pattern.draw('zigzag', 'rgba(240,230,140, 0.6)'),\r\n            ],\r\n            borderColor: [\r\n              'palegreen',\r\n              'lightskyblue',\r\n              'plum',\r\n              'coral',\r\n              'khaki',\r\n            ],\r\n            hoverBackgroundColor: [\r\n              pattern.draw('weave', 'palegreen'),\r\n              pattern.draw('diagonal', 'lightskyblue'),\r\n              pattern.draw('dot', 'plum'),\r\n              pattern.draw('plus', 'coral'),\r\n              pattern.draw('zigzag', 'khaki'),\r\n            ]\r\n          },\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // add a vote \r\n  vote = (votes, index) => {\r\n    this.props.addVote(\r\n      this.chart, // passing chart so chart.update() can be used\r\n      this.props.id, // the unique key of this particular poll\r\n      votes, // the votes array is pass to make access and hencing updating it easier\r\n      index // the index of the vote to update\r\n    )\r\n\r\n    this.setState({\r\n      voted: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    // deconstruct\r\n    const {\r\n      question,\r\n      name,\r\n      choiceNames,\r\n      votes\r\n    } = this.props.poll;\r\n\r\n    return (\r\n      <div className=\"poll-container\">\r\n        <div className=\"wrapper\">\r\n          <h2>{question}</h2>\r\n          <h3>By: {name}</h3>\r\n          <canvas ref={this.chartRef} aria-label=\"A poll data\" role=\"img\"></canvas>\r\n\r\n          {\r\n            this.state.voted\r\n              ? <div><h4>Thanks for voting</h4></div>\r\n              : <div>\r\n                <h4>What do you want to vote for?</h4>\r\n                <div className=\"choices-container\">\r\n                  {\r\n                    choiceNames.map((choice, index) => {\r\n                      return (\r\n                        <div key={index}>\r\n                          <label className=\"visually-hidden\">{choice}: {votes[index]}</label>\r\n\r\n                          <button className={\"choice\" + (index + 1)} onClick={() => { this.vote(votes, index) }}>\r\n                            {choice}\r\n                          </button>\r\n                        </div>\r\n                      )\r\n                    })\r\n                  }\r\n                </div>\r\n              </div>\r\n          }\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Poll;","import React, { Component } from 'react';\r\nimport firebase from './firebase.js';\r\nimport swal from '@sweetalert/with-react';\r\n\r\nclass Comment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      comment: '',\r\n      displayComments: false\r\n    }\r\n  }\r\n\r\n  // handle comment input\r\n  handleInput = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  }\r\n\r\n  // post new comment\r\n  postComment = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (this.state.comment.trim()) {\r\n      const dbRef = firebase.database().ref(this.props.id + '/comments/')\r\n      dbRef.push(this.state.comment);\r\n\r\n      this.setState({\r\n        comment: ''\r\n      });\r\n    } else {\r\n      swal(\r\n        <div>\r\n          <h2>Posting an empty comment is a no-no, please enter one with content.</h2>\r\n        </div>,\r\n        {\r\n          button: \"Silly me\"\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  // toggle comment display \r\n  toggleComments = () => {\r\n    this.setState({\r\n      displayComments: !this.state.displayComments\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (window.innerWidth > 1000) {\r\n      this.setState({\r\n        displayComments: true\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      this.state.displayComments\r\n        ? <div className=\"comment-container\">\r\n            <button onClick={this.toggleComments}>Hide Comments</button>\r\n\r\n            <form onSubmit={this.postComment}>\r\n              <label\r\n                className=\"visually-hidden\"\r\n                htmlFor=\"comment\">\r\n                Post your comment\r\n            </label>\r\n              <textarea\r\n                required\r\n                maxLength=\"200\"\r\n                id=\"comment\"\r\n                name=\"comment\"\r\n                placeholder=\"What's your thought on this poll?\"\r\n                rows=\"3\"\r\n                value={this.state.comment}\r\n                onChange={this.handleInput}>\r\n              </textarea>\r\n              <button type=\"submit\">Post Comment</button>\r\n            </form>\r\n\r\n            <div>\r\n              {\r\n                this.props.comments\r\n                  ? Object.keys(this.props.comments).reverse().map(comment => <p key={comment}>{this.props.comments[comment]}</p>)\r\n                  : null\r\n              }\r\n            </div>\r\n          </div>\r\n        : <div className=\"comment-container\">\r\n            <button onClick={this.toggleComments}>Show Comments</button>\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comment;","import React, { Component, Fragment } from 'react';\nimport firebase from './firebase.js';\nimport Form from './Form.js';\nimport Poll from './Poll.js';\nimport Comment from './Comment.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      // array of objects, each of which contains a unique key and the poll object\n      polls: [],\n      isLoading: true,\n    }\n  }\n\n  // save a vote to firebase\n  addVote = (chart, key, votes, choiceIndex) => {\n    const dbRef = firebase.database().ref(key);\n\n    const newVotes = votes;\n    newVotes[choiceIndex]++;\n\n    dbRef.child('/votes/').set(newVotes);\n\n    const newPolls = [...this.state.polls].map(poll => {\n      if (poll.key === key) {\n        poll.votes = newVotes;\n      }\n      return poll;\n    });\n\n    // setting a new poll so that react will update\n    this.setState({\n      polls: newPolls\n    });\n\n    chart.update();\n  }\n\n  // save a poll to firebase\n  addPoll = (poll) => {\n    const dbRef = firebase.database().ref();\n\n    dbRef.push(poll);\n  }\n\n  // scroll to top\n  toTop = () => {\n    document.body.scrollTop = 0;\n    document.documentElement.scrollTop = 0;\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref().orderByKey();\n\n    dbRef.on('value', response => {\n      const newPolls = [];\n      const polls = response.val();\n\n      // the polls are already in ascending order as long as the keys are the unique ones generated by firebase,\n      // only need to reverse it to get descending order, which is the lastest poll first\n      for (let key in polls) {\n        newPolls.push({\n          key: key,\n          poll: polls[key]\n        });\n      }\n      newPolls.reverse();\n\n      this.setState({\n        polls: newPolls,\n        isLoading: false,\n      });\n    });\n\n    // display scroll to top button when scrolled down enough\n    window.onscroll = function() {\n      if (document.body.scrollTop > 1000 || document.documentElement.scrollTop > 1000) {\n        document.getElementById(\"toTop\").style.display = \"block\";\n      } else {\n        document.getElementById(\"toTop\").style.display = \"none\";\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"full-view\">\n          <h1>POLL UP</h1>\n          <Form addPoll={this.addPoll} />\n        </div>\n\n        <section className=\"content-container\">\n          {\n            this.state.isLoading\n              ? <div class=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n              : this.state.polls.map(pollObject => {\n                return (\n                  <div className=\"polls-container wrapper\" key={pollObject.key}>\n                    <Poll\n                      id={pollObject.key}\n                      poll={pollObject.poll}\n                      addVote={this.addVote}\n                    />\n                    <Comment \n                      id={pollObject.key}\n                      comments={pollObject.poll.comments}\n                      addComment={this.addComment}\n                    />\n                  </div>\n                )\n              })\n          }\n        </section>\n\n        <button id=\"toTop\" onClick={this.toTop}><h2><p className=\"visually-hidden\">Back to top.</p>^</h2></button>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}