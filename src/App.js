import React, { Component, Fragment } from 'react';
import firebase from './firebase.js';
import Form from './Form.js';
import Poll from './Poll.js';
import Comment from './Comment.js';

class App extends Component {
  constructor() {
    super();

    this.state = {
      // array of objects, each of which contains a unique key and the poll object
      polls: [],
      isLoading: true,
    }
  }

  // save a vote to firebase
  addVote = (chart, key, votes, choiceIndex) => {
    const dbRef = firebase.database().ref(key);

    const newVotes = votes;
    newVotes[choiceIndex]++;

    dbRef.child('/votes/').set(newVotes);

    const newPolls = [...this.state.polls].map(poll => {
      if (poll.key === key) {
        poll.votes = newVotes;
      }
      return poll;
    });

    // setting a new poll so that react will update
    this.setState({
      polls: newPolls
    });

    chart.update();
  }

  // save a poll to firebase
  addPoll = (poll) => {
    const dbRef = firebase.database().ref();

    dbRef.push(poll);
  }

  // scroll to top
  toTop = () => {
    document.body.scrollTop = 0;
    document.documentElement.scrollTop = 0;
  }

  componentDidMount() {
    const dbRef = firebase.database().ref().orderByKey();

    dbRef.on('value', response => {
      const newPolls = [];
      const polls = response.val();

      // the polls are already in ascending order as long as the keys are the unique ones generated by firebase,
      // only need to reverse it to get descending order, which is the lastest poll first
      for (let key in polls) {
        newPolls.push({
          key: key,
          poll: polls[key]
        });
      }
      newPolls.reverse();

      this.setState({
        polls: newPolls,
        isLoading: false,
      });
    });

    // display scroll to top button when scrolled down enough
    window.onscroll = function() {
      if (document.body.scrollTop > 1000 || document.documentElement.scrollTop > 1000) {
        document.getElementById("toTop").style.display = "block";
      } else {
        document.getElementById("toTop").style.display = "none";
      }
    }
  }

  render() {
    return (
      <div className="App">
        <div className="full-view">
          <h1>POLL UP</h1>
          <Form addPoll={this.addPoll} />
        </div>

        <section className="content-container">
          {
            this.state.isLoading
              ? <div className="lds-spinner"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
              : this.state.polls.map(pollObject => {
                return (
                  <div className="polls-container wrapper" key={pollObject.key}>
                    <Poll
                      id={pollObject.key}
                      poll={pollObject.poll}
                      addVote={this.addVote}
                    />
                    <Comment 
                      id={pollObject.key}
                      comments={pollObject.poll.comments}
                      addComment={this.addComment}
                    />
                  </div>
                )
              })
          }
        </section>

        <button id="toTop" onClick={this.toTop}><h2><p className="visually-hidden">Back to top.</p>^</h2></button>
      </div>
    );
  }
}

export default App;